<?php

/**
 * Implements hook_permission().
 */
function pwp_daily_permission() {
  return [
    'access pwp_daily game' => [
      'title' => t('Access content for the Daily Game.'),
    ],
    'play pwp_daily game' => [
      'title' => t('Save picks for Daily Game.'),
    ],
  ];
}


/**
 * Implements hook_menu().
 */
function pwp_daily_menu() {
  return [
    'pwp_daily/data/fetch' => [
      'title' => 'PWP Daily Data Fetch',
      'page callback' => 'pwp_daily_data_fetch',
      'access arguments' => ['access pwp_daily game'],
      'file' => 'includes/data-fetch.menu.inc',
      'type' => MENU_CALLBACK,
    ],
    'pwp_daily/data/save' => [
      'title' => 'PWP Daily Data Save',
      'page callback' => 'pwp_daily_data_save',
      'access callback' => ['play pwp_daily game'],
      'file' => 'includes/data-save.menu.inc',
      'type' => MENU_CALLBACK,
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function pwp_daily_theme($existing, $type, $theme, $path) {
  return [
    'pwp_daily_game' => [
      'render element' => 'content',
      'template' => 'pwp_daily_game',
      'path' => pwp_daily_helpers::getPath('templates'),
    ],
  ];
}

/**
 * Implements hook_block_info().
 */
function pwp_daily_block_info() {
  return [
    'daily_game' => [
      'info' => t('Daily Game'),
      'cache' => DRUPAL_NO_CACHE,
    ],
  ];
}

/**
 * Implements hook_block_view().
 */
function pwp_daily_block_view($delta = '') {
  switch ($delta) {
    case 'daily_game':
      $block['content'] = [
        '#theme' => 'pwp_daily_game',
        '#attached' => [
          'css' => [
            pwp_daily_helpers::getPath('css/styles.css'),
          ],
          'js' => array_merge(
            pwp_daily_helpers::getSharedJSLibraries(),
            [
              [
                'type' => 'file',
                'data' => pwp_daily_helpers::getPath('js/pwp_daily_game/main.js'),
                'scope' => 'footer',
              ],
            ]
          ),
        ],
      ];

      return $block;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function pwp_daily_field_widget_form_alter(&$element, &$form_state, $context) {
  $fieldName = $context['field']['field_name'];
  if ($fieldName === 'field_daily_teams') {
    $dailyTeamsFormState = pwp_daily_helpers::getInlineEntityFormState($element, $form_state);

    if ($dailyTeamsFormState['form'] === 'add') {
      $title = 'Team ' . strtoupper(pwp_daily_constants::TEAM_KEYS[count($dailyTeamsFormState['entities'])]);
      $element['form']['title']['#default_value'] = $title;
    }
  }
}
